openapi: 3.0.3
info:
  title: PRD Draft Documentation System API
  description: API for managing PRD (Product Requirements Document) drafts with collaborative editing and review workflows
  version: 1.0.0
  contact:
    name: Codex Father Team
    email: team@codex-father.dev
  license:
    name: MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.codex-father.dev/v1
    description: Production server

paths:
  # PRD Draft Management
  /drafts:
    get:
      summary: List PRD drafts
      description: Retrieve a paginated list of PRD drafts with optional filtering
      operationId: listDrafts
      tags:
        - PRD Drafts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/StatusType'
        - name: author
          in: query
          schema:
            type: string
        - name: template
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
            description: Search in title and content
      responses:
        '200':
          description: List of PRD drafts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PRDDraftSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create new PRD draft
      description: Create a new PRD draft using specified template
      operationId: createDraft
      tags:
        - PRD Drafts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDraftRequest'
      responses:
        '201':
          description: PRD draft created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PRDDraftResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /drafts/{draftId}:
    get:
      summary: Get PRD draft details
      description: Retrieve detailed information about a specific PRD draft
      operationId: getDraft
      tags:
        - PRD Drafts
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: includeContent
          in: query
          schema:
            type: boolean
            default: true
        - name: version
          in: query
          schema:
            type: integer
            description: Specific version number to retrieve
      responses:
        '200':
          description: PRD draft details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PRDDraftResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    put:
      summary: Update PRD draft
      description: Update PRD draft content and metadata
      operationId: updateDraft
      tags:
        - PRD Drafts
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDraftRequest'
      responses:
        '200':
          description: PRD draft updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PRDDraftResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'

    delete:
      summary: Delete PRD draft
      description: Soft delete a PRD draft (moves to archive)
      operationId: deleteDraft
      tags:
        - PRD Drafts
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: force
          in: query
          schema:
            type: boolean
            default: false
            description: Permanently delete instead of archiving
      responses:
        '204':
          description: PRD draft deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Version Management
  /drafts/{draftId}/versions:
    get:
      summary: List draft versions
      description: Get version history for a PRD draft
      operationId: listVersions
      tags:
        - Versions
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: List of versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VersionSummary'

  /drafts/{draftId}/versions/{versionNumber}:
    get:
      summary: Get specific version
      description: Retrieve a specific version of the draft
      operationId: getVersion
      tags:
        - Versions
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: versionNumber
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Version details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'

    post:
      summary: Restore version
      description: Restore draft to a specific version
      operationId: restoreVersion
      tags:
        - Versions
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: versionNumber
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commitMessage:
                  type: string
                  maxLength: 500
                  description: Reason for restoration
              required:
                - commitMessage
      responses:
        '200':
          description: Version restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PRDDraftResponse'

  # Review Management
  /drafts/{draftId}/reviews:
    get:
      summary: Get review status
      description: Get current review status and history
      operationId: getReviewStatus
      tags:
        - Reviews
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Review status details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewStatusResponse'

    post:
      summary: Submit for review
      description: Submit draft for review process
      operationId: submitForReview
      tags:
        - Reviews
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitReviewRequest'
      responses:
        '201':
          description: Review process started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewStatusResponse'

  /drafts/{draftId}/reviews/{reviewId}:
    put:
      summary: Submit review
      description: Submit review feedback and decision
      operationId: submitReview
      tags:
        - Reviews
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitReviewResponse'
      responses:
        '200':
          description: Review submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'

  # Template Management
  /templates:
    get:
      summary: List templates
      description: Get available PRD templates
      operationId: listTemplates
      tags:
        - Templates
      parameters:
        - name: active
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TemplateSummary'

    post:
      summary: Create template
      description: Create a new PRD template
      operationId: createTemplate
      tags:
        - Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateRequest'
      responses:
        '201':
          description: Template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'

  /templates/{templateId}:
    get:
      summary: Get template details
      description: Retrieve template structure and configuration
      operationId: getTemplate
      tags:
        - Templates
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'

  # User Management
  /users:
    get:
      summary: List users
      description: Get list of users (admin only)
      operationId: listUsers
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSummary'

  /users/me:
    get:
      summary: Get current user profile
      description: Get current authenticated user information
      operationId: getCurrentUser
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

    put:
      summary: Update user profile
      description: Update current user preferences and settings
      operationId: updateCurrentUser
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Core Entities
    PRDDraftSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/StatusType'
        authorId:
          type: string
        templateId:
          type: string
        version:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'

    PRDDraftResponse:
      allOf:
        - $ref: '#/components/schemas/PRDDraftSummary'
        - type: object
          properties:
            content:
              type: string
              description: Markdown content
            sections:
              type: array
              items:
                $ref: '#/components/schemas/DocumentSection'
            decisions:
              type: array
              items:
                $ref: '#/components/schemas/TechnicalDecisionSummary'
            diagrams:
              type: array
              items:
                $ref: '#/components/schemas/DiagramComponentSummary'

    CreateDraftRequest:
      type: object
      required:
        - title
        - templateId
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 500
        templateId:
          type: string
        initialContent:
          type: string
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'

    UpdateDraftRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 500
        content:
          type: string
        commitMessage:
          type: string
          maxLength: 500
        sections:
          type: array
          items:
            $ref: '#/components/schemas/DocumentSection'
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'

    DocumentMetadata:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          maxItems: 10
        category:
          type: string
        priority:
          type: string
          enum: [low, medium, high]
        estimatedReadTime:
          type: integer
        wordCount:
          type: integer
        lastEditor:
          type: string

    DocumentSection:
      type: object
      required:
        - id
        - title
        - order
        - content
        - level
      properties:
        id:
          type: string
        title:
          type: string
        order:
          type: integer
        content:
          type: string
        level:
          type: integer
          minimum: 1
          maximum: 6
        isRequired:
          type: boolean
        editableBy:
          type: array
          items:
            $ref: '#/components/schemas/RoleType'

    # Review System
    ReviewStatusResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        draftId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/StatusType'
        phase:
          $ref: '#/components/schemas/ReviewPhase'
        assignees:
          type: array
          items:
            $ref: '#/components/schemas/ReviewAssignee'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ReviewSummary'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        priority:
          type: string
          enum: [low, medium, high]

    SubmitReviewRequest:
      type: object
      required:
        - assignees
        - dueDate
      properties:
        assignees:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
              role:
                $ref: '#/components/schemas/RoleType'
          minItems: 1
        dueDate:
          type: string
          format: date-time
        priority:
          type: string
          enum: [low, medium, high]
          default: medium
        message:
          type: string
          maxLength: 1000

    SubmitReviewResponse:
      type: object
      required:
        - status
        - comments
      properties:
        status:
          type: string
          enum: [approved, rejected, changes_requested]
        comments:
          type: array
          items:
            $ref: '#/components/schemas/ReviewComment'
          minItems: 1

    ReviewComment:
      type: object
      required:
        - content
        - type
      properties:
        sectionId:
          type: string
        lineNumber:
          type: integer
        content:
          type: string
          minLength: 1
          maxLength: 2000
        type:
          type: string
          enum: [suggestion, issue, question, approval]
        severity:
          type: string
          enum: [low, medium, high, blocking]
          default: medium

    # Version System
    VersionSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        versionNumber:
          type: integer
        changeType:
          $ref: '#/components/schemas/ChangeType'
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        commitMessage:
          type: string

    VersionResponse:
      allOf:
        - $ref: '#/components/schemas/VersionSummary'
        - type: object
          properties:
            changes:
              type: array
              items:
                $ref: '#/components/schemas/VersionChange'
            contentSnapshot:
              type: string
            metadata:
              $ref: '#/components/schemas/VersionMetadata'

    VersionChange:
      type: object
      properties:
        path:
          type: string
        operation:
          type: string
          enum: [add, remove, replace]
        oldValue:
          oneOf:
            - type: string
            - type: object
        newValue:
          oneOf:
            - type: string
            - type: object
        diffSize:
          type: integer

    # Template System
    TemplateSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: string
        isDefault:
          type: boolean
        createdAt:
          type: string
          format: date-time

    TemplateResponse:
      allOf:
        - $ref: '#/components/schemas/TemplateSummary'
        - type: object
          properties:
            structure:
              $ref: '#/components/schemas/TemplateStructure'

    CreateTemplateRequest:
      type: object
      required:
        - name
        - description
        - structure
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
        description:
          type: string
          minLength: 10
          maxLength: 500
        structure:
          $ref: '#/components/schemas/TemplateStructure'
        isDefault:
          type: boolean
          default: false

    TemplateStructure:
      type: object
      properties:
        sections:
          type: array
          items:
            $ref: '#/components/schemas/TemplateSectionDef'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/TemplateFieldDef'
        decisionTables:
          type: array
          items:
            $ref: '#/components/schemas/DecisionTableDef'

    # User System
    UserSummary:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        email:
          type: string
          format: email
        isActive:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserSummary'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/UserRoleSummary'
            preferences:
              $ref: '#/components/schemas/UserPreferences'

    UpdateUserRequest:
      type: object
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 100
        preferences:
          $ref: '#/components/schemas/UserPreferences'

    UserPreferences:
      type: object
      properties:
        language:
          type: string
          default: "en"
        timezone:
          type: string
          default: "UTC"
        emailNotifications:
          type: boolean
          default: true
        defaultTemplate:
          type: string
        editorSettings:
          type: object

    # Enums and Types
    StatusType:
      type: string
      enum: [draft, in_review, changes_requested, approved, rejected, confirmed]

    ReviewPhase:
      type: string
      enum: [technical, business, final, complete]

    ChangeType:
      type: string
      enum: [create, edit, review, approve, reject, restore]

    RoleType:
      type: string
      enum: [architect, product_manager, developer, tester, reviewer]

    # Generic Types
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - bearerAuth: []