{
  "name": "openai_codex",
  "display_name": "OpenAI Codex",
  "description": "Access OpenAI's Codex CLI for code generation, explanation, and problem-solving",
  "base_url": "http://localhost:8000/",
  "protocol": "json-rpc",
  "protocol_version": "2.0",
  "methods": [
    {
      "name": "codex_completion",
      "description": "Generate code or explanations using OpenAI's Codex CLI tool",
      "params": {
        "prompt": {
          "type": "string",
          "description": "The prompt to send to Codex",
          "required": true
        },
        "model": {
          "type": "string",
          "description": "The model to use for code generation",
          "required": false,
          "enum": ["o4-mini", "o3", "o3-mini", "o1", "o1-mini", "o1-pro", "gpt-4.1", "gpt-4o", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-4o-mini"],
          "default": "o4-mini"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of image paths or data URIs to include",
          "required": false
        },
        "additional_args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Additional CLI arguments to pass to Codex",
          "required": false
        }
      },
      "result": {
        "output": {
          "type": "string",
          "description": "The response generated by Codex"
        },
        "status": {
          "type": "string",
          "description": "Status of the completion request (success or error)"
        }
      }
    },
    {
      "name": "write_code",
      "description": "Generate code for a specific task or problem",
      "params": {
        "task": {
          "type": "string",
          "description": "Description of the coding task",
          "required": true
        },
        "language": {
          "type": "string",
          "description": "Programming language for the solution",
          "required": true,
          "enum": ["python", "javascript", "typescript", "java", "c", "cpp", "csharp", "go", "ruby", "rust", "php", "swift", "kotlin"]
        },
        "model": {
          "type": "string",
          "description": "The model to use for code generation",
          "required": false,
          "enum": ["o4-mini", "o3", "o3-mini", "o1", "o1-mini", "o1-pro", "gpt-4.1", "gpt-4o", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-4o-mini"],
          "default": "o4-mini"
        }
      },
      "result": {
        "output": {
          "type": "string",
          "description": "The generated code"
        },
        "status": {
          "type": "string",
          "description": "Status of the request"
        }
      }
    },
    {
      "name": "explain_code",
      "description": "Get an explanation of code functionality",
      "params": {
        "code": {
          "type": "string",
          "description": "The code to explain",
          "required": true
        },
        "model": {
          "type": "string",
          "description": "The model to use for code generation",
          "required": false,
          "enum": ["o4-mini", "o3", "o3-mini", "o1", "o1-mini", "o1-pro", "gpt-4.1", "gpt-4o", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-4o-mini"],
          "default": "o4-mini"
        }
      },
      "result": {
        "output": {
          "type": "string",
          "description": "The explanation of the code"
        },
        "status": {
          "type": "string",
          "description": "Status of the request"
        }
      }
    },
    {
      "name": "debug_code",
      "description": "Find and fix bugs in code",
      "params": {
        "code": {
          "type": "string",
          "description": "The code to debug",
          "required": true
        },
        "issue_description": {
          "type": "string",
          "description": "Description of the issue or error",
          "required": false
        },
        "model": {
          "type": "string",
          "description": "The model to use for code generation",
          "required": false,
          "enum": ["o4-mini", "o3", "o3-mini", "o1", "o1-mini", "o1-pro", "gpt-4.1", "gpt-4o", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-4o-mini"],
          "default": "o4-mini"
        }
      },
      "result": {
        "output": {
          "type": "string",
          "description": "The debugging analysis and fix"
        },
        "status": {
          "type": "string",
          "description": "Status of the request"
        }
      }
    }
  ],
  "examples": [
    {
      "name": "Generate JavaScript sorting function",
      "description": "Ask Codex to write a JavaScript function for sorting",
      "method": "write_code",
      "params": {
        "task": "Write a function to sort an array of objects by a property value",
        "language": "javascript",
        "model": "o4-mini"
      }
    },
    {
      "name": "Fix a bug with image context",
      "description": "Ask Codex to fix a bug shown in a screenshot",
      "method": "codex_completion",
      "params": {
        "prompt": "What's wrong with this code and how should I fix it?",
        "images": ["path/to/screenshot.png"]
      }
    },
    {
      "name": "Generate Fibonacci sequence",
      "description": "Create a function that calculates Fibonacci numbers",
      "method": "write_code",
      "params": {
        "task": "Write a function that calculates the first 100 Fibonacci numbers",
        "language": "python"
      }
    },
    {
      "name": "Explain complex code",
      "description": "Get an explanation of how code works",
      "method": "explain_code",
      "params": {
        "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)"
      }
    }
  ],
  "capabilities": [
    "code_generation",
    "code_explanation",
    "debugging",
    "image_understanding"
  ],
  "auth": {
    "type": "none"
  }
}