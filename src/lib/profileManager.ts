import * as fs from 'fs/promises';
import * as path from 'path';
import { CodexConfig } from '../core/lib/models/configuration.js';

export interface Profile {
  name: string;
  config: CodexConfig;
  description?: string;
  reason?: string;
}

export function createAutoFixProfile(
  originalConfig: any,
  fixedConfig: CodexConfig,
  reason: string
): Profile {
  return {
    name: 'codex-father-auto-fix',
    config: fixedConfig,
    description: 'Auto-fixed configuration for compatibility',
    reason
  };
}

export async function writeProfile(profile: Profile, configTomlPath: string): Promise<void> {
  const configDir = path.dirname(configTomlPath);
  const profileName = profile.name;
  
  // 读取现有的 TOML 文件
  let tomlContent = '';
  try {
    tomlContent = await fs.readFile(configTomlPath, 'utf-8');
  } catch (error) {
    // 如果文件不存在，创建基本的结构
    tomlContent = '';
  }

  // 添加 profile 到 TOML 内容
  const profileSection = `[profiles.${profileName}]\n`;
  const profileContent = Object.entries(profile.config)
    .map(([key, value]) => {
      if (typeof value === 'object') {
        return `${key} = ${JSON.stringify(value)}`;
      }
      return `${key} = ${JSON.stringify(value)}`;
    })
    .join('\n');

  const comment = `# ${profile.description || 'Auto-generated profile'}\n` +
    `# Reason: ${profile.reason || 'Compatibility fix'}\n` +
    `# Auto-generated by codex-father\n`;

  const newProfileContent = `\n${comment}${profileSection}${profileContent}\n`;

  // 如果 profiles 部分不存在，添加它
  if (!tomlContent.includes('[profiles]')) {
    tomlContent += '\n[profiles]\n';
  }

  // 检查 profile 是否已存在
  const profileRegex = new RegExp(`\\[profiles\\.${profileName}\\][\\s\\S]*?(?=\\n\\[|\\n\\n|$)`, 'g');
  if (profileRegex.test(tomlContent)) {
    // 替换现有 profile
    tomlContent = tomlContent.replace(profileRegex, newProfileContent.trim());
  } else {
    // 添加新 profile
    tomlContent += newProfileContent;
  }

  // 写回文件
  await fs.writeFile(configTomlPath, tomlContent);
}

export async function readProfile(
  profileName: string,
  configTomlPath: string
): Promise<Profile | null> {
  try {
    const tomlContent = await fs.readFile(configTomlPath, 'utf-8');
    
    // 查找 profile 部分
    const profileRegex = new RegExp(`\\[profiles\\.${profileName}\\]([\\s\\S]*?)(?=\\n\\[|\\n\\n|$)`);
    const match = tomlContent.match(profileRegex);
    
    if (!match) {
      return null;
    }

    const profileContent = match[1];
    const config: any = {};

    // 简单的 TOML 解析（基础实现）
    const lines = profileContent.split('\n');
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const eqIndex = trimmed.indexOf('=');
        if (eqIndex > 0) {
          const key = trimmed.substring(0, eqIndex).trim();
          let value = trimmed.substring(eqIndex + 1).trim();
          
          // 移除引号
          if ((value.startsWith('"') && value.endsWith('"')) || 
              (value.startsWith("'") && value.endsWith("'"))) {
            value = value.slice(1, -1);
          }
          
          // 尝试解析 JSON
          try {
            config[key] = JSON.parse(value);
          } catch {
            config[key] = value;
          }
        }
      }
    }

    return {
      name: profileName,
      config,
      description: 'Auto-generated profile',
      reason: 'Compatibility fix'
    };
  } catch (error) {
    return null;
  }
}