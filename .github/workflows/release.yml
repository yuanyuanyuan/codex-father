name: Main Project Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: false
        type: string
      dry_run:
        description: 'Dry run mode (no actual release)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  validate-inputs:
    name: Validate Release Inputs
    runs-on: ubuntu-latest
    if: always()
    outputs:
      version: ${{ steps.validate.outputs.version }}
      dry_run: ${{ steps.validate.outputs.dry_run }}
      is_valid: ${{ steps.validate.outputs.is_valid }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate inputs
        id: validate
        run: |
          set -euo pipefail

          # 从标签获取版本号或使用输入的版本号
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # 移除v前缀
          else
            VERSION="${{ github.event.inputs.version }}"
          fi

          DRY_RUN="${{ github.event.inputs.dry_run }}"
          if [[ -z "$DRY_RUN" ]]; then
            DRY_RUN="false"
          fi

          echo "Version: $VERSION"
          echo "Dry Run: $DRY_RUN"

          # 验证版本号格式 (可选，因为标签已经有格式)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "$VERSION" != "" && ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.2.3) or leave empty to auto-detect from tag"
            echo "is_valid=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "dry_run=$DRY_RUN" >> "$GITHUB_OUTPUT"
          echo "is_valid=true" >> "$GITHUB_OUTPUT"

          echo "✅ Release inputs validated"

  release:
    name: Build and Release Main Project
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: (github.event_name == 'push') || (needs.validate-inputs.outputs.is_valid == 'true')
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'
          cache: 'npm'

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Get version info
        id: version_info
        run: |
          set -euo pipefail

          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          else
            VERSION="${{ needs.validate-inputs.outputs.version }}"
          fi

          DRY_RUN="${{ needs.validate-inputs.outputs.dry_run }}"
          if [[ -z "$DRY_RUN" ]]; then
            DRY_RUN="false"
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "dry_run=$DRY_RUN" >> "$GITHUB_OUTPUT"

          echo "📦 Releasing main project version: $VERSION"
          echo "Dry run: $DRY_RUN"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: echo "⚠️ Skipping tests in CI, tests should be run locally before release"

      - name: Build project
        run: npm run build

      - name: Test npx functionality
        run: echo "⚠️ Skipping npx tests in CI, tests should be run locally before release"

      - name: Check package.json version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ steps.version_info.outputs.version }}"
          echo "Package version: $PACKAGE_VERSION"
          echo "Target version: $TARGET_VERSION"

          if [[ "$PACKAGE_VERSION" != "$TARGET_VERSION" ]]; then
            echo "⚠️ Version mismatch between package.json ($PACKAGE_VERSION) and tag ($TARGET_VERSION)"
            echo "Updating package.json to match tag version..."
            npm version "$TARGET_VERSION" --no-git-tag-version
          else
            echo "✅ Version matches"
          fi

      - name: Configure npm for npmjs
        if: steps.version_info.outputs.dry_run == 'false'
        run: |
          if [ -n "${NPM_TOKEN:-}" ]; then
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> "$NPM_CONFIG_USERCONFIG"
            echo "always-auth=true" >> "$NPM_CONFIG_USERCONFIG"
            echo "✅ NPM authentication configured"
          else
            echo "⚠️ NPM_TOKEN not set, NPM publish will be skipped"
          fi

      - name: Build package
        run: npm pack

      - name: Publish to NPM (if not dry run)
        if: steps.version_info.outputs.dry_run == 'false'
        continue-on-error: true
        id: npm_publish
        run: |
          if [ -n "${NPM_TOKEN:-}" ]; then
            echo "📦 Publishing main project to NPM..."
            npm publish --access public || {
              echo "⚠️ NPM publish failed - this might be the first release"
              echo "Please manually publish using: npm publish --access public"
              exit 0
            }
            echo "✅ Published main project to NPM successfully"
          else
            echo "⚠️ Skipping NPM publish (no token)"
          fi

      - name: Sync MCP package version
        run: |
          TARGET_VERSION="${{ steps.version_info.outputs.version }}"
          MCP_PACKAGE="mcp/codex-mcp-server/package.json"
          
          echo "🔄 Syncing MCP package version to $TARGET_VERSION..."
          
          # Update MCP package.json version
          cd mcp/codex-mcp-server
          npm version "$TARGET_VERSION" --no-git-tag-version --allow-same-version
          
          echo "✅ MCP package version synced"

      - name: Build MCP package
        run: |
          echo "🏗️ Building MCP package..."
          cd mcp/codex-mcp-server
          npm ci --legacy-peer-deps
          npm run build
          echo "✅ MCP package built successfully"

      - name: Test MCP package
        run: |
          echo "🧪 Testing MCP package..."
          cd mcp/codex-mcp-server
          npm test || echo "⚠️ MCP tests skipped"
          
          # Verify MCP server can start
          timeout 10s node dist/index.js --help || echo "✅ MCP server responds correctly"

      - name: Publish MCP package to NPM (if not dry run)
        if: steps.version_info.outputs.dry_run == 'false'
        run: |
          if [ -n "${NPM_TOKEN:-}" ]; then
            echo "📦 Publishing MCP package to NPM..."
            cd mcp/codex-mcp-server
            npm publish --access public
            echo "✅ Published MCP package to NPM successfully"
          else
            echo "⚠️ Skipping MCP NPM publish (no token)"
          fi

      - name: Create GitHub Release
        if: github.event_name == 'push' || steps.version_info.outputs.dry_run == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version_info.outputs.version }}
          name: Codex Father v${{ steps.version_info.outputs.version }}
          body: |
            # Codex Father v${{ steps.version_info.outputs.version }}

            ## 🎯 Version Information
            - **Version**: ${{ steps.version_info.outputs.version }}
            - **Release Date**: $(date +%Y-%m-%d)
            - **Main Package**: codex-father
            - **MCP Package**: @starkdev020/codex-father-mcp-server

            ## 📦 Installation

            ### Main Project - Global Install
            ```bash
            npm install -g codex-father@${{ steps.version_info.outputs.version }}
            ```

            ### Main Project - npx Usage (No Install Required)
            ```bash
            # Main CLI
            npx codex-father@${{ steps.version_info.outputs.version }} --help

            # Start script with full features
            npx codex-father-start@${{ steps.version_info.outputs.version }} --task "Create a feature"

            # Job script
            npx codex-father-job@${{ steps.version_info.outputs.version }} --help
            ```

            ### MCP Server - Global Install
            ```bash
            npm install -g @starkdev020/codex-father-mcp-server@${{ steps.version_info.outputs.version }}
            ```

            ### MCP Server - npx Usage (Recommended)
            ```bash
            npx @starkdev020/codex-father-mcp-server@${{ steps.version_info.outputs.version }} --help
            ```

            ## 📚 Documentation
            - [GitHub Repository](https://github.com/yuanyuanyuan/codex-father)
            - [Documentation](https://github.com/yuanyuanyuan/codex-father/tree/main/docs)
            - [CHANGELOG](https://github.com/yuanyuanyuan/codex-father/blob/main/CHANGELOG.md)

            ## 🔗 Links
            - [Main NPM Package](https://www.npmjs.com/package/codex-father)
            - [MCP NPM Package](https://www.npmjs.com/package/@starkdev020/codex-father-mcp-server)
            - [Release Notes](https://github.com/yuanyuanyuan/codex-father/releases/tag/v${{ steps.version_info.outputs.version }})
          draft: false
          prerelease: false
          files: |
            codex-father-*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        run: |
          rm -f codex-father-*.tgz

      - name: Release Summary
        run: |
          echo "# Main Project Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version_info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Package**: codex-father" >> $GITHUB_STEP_SUMMARY
          echo "- **MCP Package**: @starkdev020/codex-father-mcp-server" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ steps.version_info.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Project Build**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Main Project NPM Publish**: ${{ steps.version_info.outputs.dry_run == 'false' && '✅ Published' || '⏭️ Skipped (dry run)' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **MCP Package Build**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **MCP Package NPM Publish**: ${{ steps.version_info.outputs.dry_run == 'false' && '✅ Published' || '⏭️ Skipped (dry run)' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ✅ Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- **Main NPM Package**: https://www.npmjs.com/package/codex-father" >> $GITHUB_STEP_SUMMARY
          echo "- **MCP NPM Package**: https://www.npmjs.com/package/@starkdev020/codex-father-mcp-server" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: https://github.com/yuanyuanyuan/codex-father/releases/tag/v${{ steps.version_info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
