name: Test Suite

on:
  push:
    branches: [ main, develop, '001-2-specification-data' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行完整测试
    - cron: '0 2 * * *'

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type check
      run: npm run typecheck
      
    - name: Run linter
      run: npm run lint:check
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run unit tests with coverage
      run: npm run test:coverage:unit
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit
        name: codecov-unit

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-unit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run contract tests
      run: npm run test:contract

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check E2E environment
      run: npm run test:e2e:check
      
    - name: Prepare E2E environment
      run: npm run test:e2e:prepare
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Run E2E tests with coverage
      run: npm run test:e2e:coverage
      
    - name: Upload E2E coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/e2e/lcov.info
        flags: e2e
        name: codecov-e2e
      
    - name: Generate test report
      run: npm run test:report
      
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
        retention-days: 7

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-e2e
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run performance benchmarks
      run: npm run test:performance
      
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: test-results/performance-*.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-unit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level high
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript

  build-test:
    name: Build Test
    runs-on: ${{ matrix.os }}
    needs: test-unit
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
        exclude:
          - os: windows-latest
            node-version: 18.x
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Test CLI installation
      run: npm pack && npm install -g codex-father-*.tgz
      
    - name: Test basic CLI commands
      run: |
        codex-father --version
        codex-father --help

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, test-e2e, test-performance]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate summary report
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.test-unit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.test-integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ${{ needs.test-e2e.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.test-performance.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports have been uploaded to Codecov." >> $GITHUB_STEP_SUMMARY
        
    - name: Overall status
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ Some tests failed. Check the individual job results for details."
        exit 1
      else
      run: |
        echo "✅ All tests passed successfully!"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: failure() && (github.event_name == 'push' || github.event_name == 'pull_request')
    
    steps:
    - name: Notify on failure
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const sha = context.sha;
          
          await github.rest.repos.createCommitStatus({
            owner,
            repo,
            sha,
            state: 'failure',
            target_url: 'https://github.com/${owner}/${repo}/actions/runs/${context.runId}',
            description: 'Tests failed',
            context: 'ci/test'
          });