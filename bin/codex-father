#!/usr/bin/env node

/**
 * Codex Father CLI 主入口点
 * 可执行的 CLI 入口脚本，提供统一的命令行接口
 */

// 检查 Node.js 版本要求
const MIN_NODE_VERSION = 18;
const currentVersion = process.versions.node;
const majorVersion = parseInt(currentVersion.split('.')[0], 10);

if (majorVersion < MIN_NODE_VERSION) {
  console.error(`❌ Error: Node.js ${MIN_NODE_VERSION}+ is required. Current version: ${currentVersion}`);
  console.error('Please upgrade Node.js: https://nodejs.org/');
  process.exit(1);
}

// 错误边界：捕获未处理的异常
process.on('uncaughtException', (error) => {
  console.error('❌ Uncaught Exception:', error.message);
  console.error('Stack trace:', error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// 动态导入并启动 CLI 应用
async function main() {
  try {
    // 根据环境选择入口文件和加载方式
    const isProduction = process.env.NODE_ENV === 'production';

    let app;

    if (isProduction) {
      // 生产环境：尝试导入构建的 JavaScript 文件
      try {
        app = await import('../dist/core/cli/start.js');
      } catch (importError) {
        console.error('❌ Production build not found. Please run: npm run build');
        throw new Error('Production build is required in production mode');
      }
    } else {
      // 开发环境：使用 tsx 加载器运行 TypeScript 文件
      const { spawn } = await import('child_process');
      const path = await import('path');
      const { fileURLToPath } = await import('url');

      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);
      const tsxPath = path.resolve(__dirname, '../node_modules/.bin/tsx');
      const startTsPath = path.resolve(__dirname, '../core/cli/start.ts');

      // 检查 tsx 是否存在
      const fs = await import('fs');
      if (!fs.existsSync(tsxPath)) {
        console.error('❌ tsx not found. Please run: npm install');
        process.exit(1);
      }

      // 使用 tsx 启动 TypeScript 文件
      const child = spawn('node', [tsxPath, startTsPath, ...process.argv.slice(2)], {
        stdio: 'inherit',
        env: { ...process.env, NODE_ENV: 'development' }
      });

      child.on('exit', (code) => {
        process.exit(code || 0);
      });

      child.on('error', (error) => {
        console.error('❌ Failed to start CLI with tsx:', error.message);
        process.exit(1);
      });

      return; // 退出，让 tsx 处理剩余的执行
    }

    // 启动 CLI 应用（仅在生产环境）
    if (app.default && typeof app.default === 'function') {
      await app.default();
    } else if (app.startCLI && typeof app.startCLI === 'function') {
      await app.startCLI();
    } else {
      throw new Error('No valid CLI entry point found in the imported module');
    }
  } catch (error) {
    console.error('❌ Failed to start Codex Father CLI:');
    console.error(`   ${error.message}`);

    // 提供有用的调试信息
    if (error.code === 'MODULE_NOT_FOUND') {
      console.error('\n💡 Suggestions:');
      console.error('   1. Run `npm install` to install dependencies');
      console.error('   2. Run `npm run build` to build the project');
      console.error('   3. Check that all required files exist');
    }

    // 在开发环境显示完整堆栈
    if (process.env.NODE_ENV === 'development' || process.env.DEBUG) {
      console.error('\n🔍 Debug information:');
      console.error(error.stack);
    }

    process.exit(1);
  }
}

// 启动应用
main().catch((error) => {
  console.error('❌ Fatal error during CLI startup:', error.message);
  process.exit(1);
});